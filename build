#!/bin/bash
cd /tmp/rom # Depends on where source got synced

# Deps
sudo apt-get install cpio -y
sudo apt-get install python2 -y

# Normal build steps
. build/envsetup.sh
lunch havoc_violet-userdebug 
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 75G # It took only 6.4GB for mido
ccache -o compression=true # Will save times and data to download and upload ccache, also negligible performance issue
ccache -z # Clear old stats, so monitor script will provide real ccache statistics

mkdir -p ~/.config/rclone
echo "$rclone_config" > ~/.config/rclone/rclone.conf # Write rclone config found from env variable, so that cloud storage can be used to upload ccache


# Next 8 lines should be run first to collect ccache and then upload, after doning it 1 or 2 times, our ccache will help to build without these 8 lines
#make api-stubs-docs || echo no problem, we need ccache
#make hiddenapi-lists-docs || echo no problem, we need ccache
#make system-api-stubs-docs || echo no problem we need ccache
#make test-api-stubs-docs || echo no problem, we need ccache
#make aex -j10 & # dont remove that '&'
#sleep 85m
#kill %1
#ccache -s
#and dont use below codes for first 1 or 2 times, to get ccache uploaded,
CHATID="-1001180591337"
BOT_MSG_URL="https://api.telegram.org/bot${TOKEN}/sendMessage"
BOT_BUILD_URL="https://api.telegram.org/bot${TOKEN}/sendDocument"
# Build Machine details
cores=$(nproc --all)
os=$(cat /etc/issue)
time=$(TZ="Asia/Kolkata" date "+%a %b %d %r")


tg_post_msg() {
	curl -s -X POST "$BOT_MSG_URL" -d chat_id="$CHATID" \
	-d "disable_web_page_preview=true" \
	-d "parse_mode=html" \
	-d text="$1"

}

tg_post_log() {

	curl --progress-bar -F document=@"$1" "$BOT_BUILD_URL" \
	-F chat_id="$CHATID"  \
	-F "disable_web_page_preview=true" \
	-F "parse_mode=html" \
  -F caption="$2"
}


# upload function for uploading rom zip file! I don't want unwanted builds in my google drive haha!



# Build command! j10 for 10 cpu, j8 for 8 cpu, otherwise memeroy will end up even its 24G
# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!
#START=$(date +%s)
# Let's compile by parts! Coz of ram issue!
#tg_post_msg "<b>Build Triggered</b>%0A<b>Machine : </b><code>$os</code>%0A<b>Cores : </b><code>$cores</code>%0A<b>Time : </b><code>$time</code>"

make api-stubs-docs |& tee log.txt
make hiddenapi-lists-docs |& tee log.txt
make system-api-stubs-docs |& tee log.txt
make test-api-stubs-docs |& tee log.txt

mka bacon -j10 |& tee log.txt

END=$(date +%s)
BUILDTIME=$(echo $((${END} - ${START})) | awk '{print int ($1/3600)" Hours: "int(($1/60)%60)" Minutes: "int($1%60)" Seconds"}')

check="$(tail -n 2 ./log.txt | grep success)"

if [ -z "$check" ]; then
  tg_post_msg "<b>Havoc Build Failed.. :( </b>"
  tg_post_log "log.txt" "Full Build Log"
  sed '/FAILED/,$!d' log.txt >>errlog.txt
  tg_post_log "errlog.txt" "Error Log"
else
  zip="out/target/product/violet/*Official*.zip"
  size="$(du -h ${zip}|awk '{print $1}')"
	mdsum="$(md5sum ${zip}|awk '{print $1}')"
  file=$(basename $zip)
  rclone -P copy $zip drive:builds/Havoc
  glink="$(rclone link drive:builds/Havoc/${file})"
  index="https://builds.athuld.workers.dev/0:/Havoc/${file}"
 tg_post_msg "<b>Havoc Build Success :)</b>%0A<b>Download Links : </b><a href='$glink'>Gdrive</a>  <a href='index'>Index</a>%0A<b>Size : </b><code>$size</code>%0A<b>MD5 : </b><code>$mdsum</code>%0A<b>Build Time : </b><code>$BUILDTIME</code>"
fi

ccache -s 


